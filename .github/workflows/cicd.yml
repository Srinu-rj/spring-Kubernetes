name: spring-boot Github Actions

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - 'k8s/**'

#  schedule:
#    - cron: '* * * 8 5'

env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  JAVA_VERSION: 21 #${{ environment.JAVA_VERSION }}
  MAVEN_VERSION: 3.8.2
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  JF_USER: ${{ secrets.JF_USER }}
  JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
  JF_URL: ${{ secrets.JF_URL}}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
  ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}
  ARGO_CD_SERVER: ${{ secrets.ARGO_CD_SERVER }}
  ARGO_CD_USERNAME: ${{ secrets.ARGO_CD_USERNAME }}
  ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}
  GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}

jobs:
  Building-and-Testing:
    runs-on: ubuntu-latest
    #Todo Not strictly needed for Docker Hub, but good to include if you might switch.
    #Todo Required to push to GitHub Container Registry (ghcr.io)
    permissions:
      contents: read
      packages: write
    steps:
      - name: Run a script
        run: echo "This workflow runs at Everyone One Hour "

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Todo Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}   # Todo Make It '21'
          distribution: 'temurin' # 'adopt'
          architecture: x64
          cache: 'maven' # Strongly recommended for faster builds!
          cache-dependency-path: 'pom.xml' # Or '**/pom.xml' for multi-module projects

      - name: Setup Maven
        uses: stCarolas/setup-maven@v4.4
        with:
          maven-version: ${{ env.MAVEN_VERSION }} #3.8.2
      - name: Build with Maven
        run: mvn clean install

      - name: Run Unit Tests
        run: mvn test
      # TODO ECR BUILDING
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: spring-application
          IMAGE_TAG: v1.0
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

#      # TODO DEPLOYING ECS
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: springboot-app-task-definition.json  #Todo ECS task definition file Name
#          container-name: springboot-example #Todo ECS container name
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: springboot-example-service   #Todo Ecs service name
#          cluster: DevCluster2  #Todo ECS cluster name
#          wait-for-service-stability: true
          

#      - name: Send Email Notification
#        uses: dawidd6/action-send-mail@v6
#        with:
#          server_address: smtp.gmail.com
#          server_port: 465
#          username: ${{ secrets.EMAIL_USER }}
#          password: ${{ secrets.EMAIL_PASS }}
#          subject: "Docker Image Scan Report"
#          to: ${{ secrets.EMAIL_TO }}
#          from: GitHub CI/CD <${{ secrets.EMAIL_USER }}>
#          body: "The Trivy scan report is attached. Job Done"
#          attachments: trivy-report.json



#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3 # Using the official Docker login action
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }} # Accessing the username from GitHub Secrets
#          password: ${{ secrets.DOCKER_PASSWORD }} # Accessing the password/token from GitHub Secrets
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Build docker image
#        run: docker build -t spring-application-k8s .
#      - name: Tag docker image
#        run: docker tag spring-application-k8s srinu641/spring-application-k8s:v3.02
#      - name: Push docker image
#        run: docker push srinu641/spring-application-k8s:v3.02
#      - name: Getting Docker Images
#        run: |
#          docker images
#          docker ps -a











