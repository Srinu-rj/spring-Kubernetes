name: spring-boot Github Actions

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - 'k8s/**'

#  schedule:
#    - cron: '* * * 8 5'

env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  JAVA_VERSION: 21 #${{ environment.JAVA_VERSION }}
  MAVEN_VERSION: 3.9.9
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory #TODO Directory where build-wrapper output will be placed
  JF_USER: ${{ secrets.JF_USER }}
  JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
  JF_URL: ${{ secrets.JF_URL}}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
  ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  ARGO_CD_SERVER: ${{ secrets.ARGO_CD_SERVER }}
  ARGO_CD_USERNAME: ${{ secrets.ARGO_CD_USERNAME }}
  ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}
  GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}

jobs:
  Building-and-Testing:
    runs-on: ubuntu-latest
    #Todo Not strictly needed for Docker Hub, but good to include if you might switch.
    #Todo Required to push to GitHub Container Registry (ghcr.io)
    permissions:
      contents: read
      packages: write

    steps:
      - name: Run a script
        run: echo "This workflow runs at Everyone One Hour "

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Todo Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}   # Todo Make It '21'
          distribution: 'temurin' # 'adopt'
          architecture: x64
          cache: 'maven' # Strongly recommended for faster builds!
          cache-dependency-path: 'pom.xml' # Or '**/pom.xml' for multi-module projects

      - name: Maven Validate
        run: mvn validate

      - name: Maven Compile
        run: mvn compile

      - name: Maven Package
        run: mvn package

      - name: Maven clean install
        run: mvn clean install

      - name: Install Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Terraform - Checking Version
        run: terraform -version
        



#      - name: Trivy Scanning
#        run:

#      - name: Install kubectl
#        uses: azure/setup-kubectl@v2.0
#        with:
#          version: 'v1.27.0' # default is latest stable
#        id: install
#
#      # TODO ECR BUILDING
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v3
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-south-1
#
#      - name: Checking Aws Credentials
#        run: aws sts get-caller-identity
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          mask-password: 'true'
#
#      - name: Build, tag, and push docker image to Amazon ECR
#        env:
#          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          REPOSITORY: spring-application
#          IMAGE_TAG: v1.02
#        run: |
#          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#
#      # Update Kubeconfig
#      - name: Update kubeconfig
#        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name nk

      # Install kubectl -> todo https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html
#      - name: Install kubectl
#        run: |
#          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.30.7/2024-12-12/bin/linux/amd64/kubectl
#          chmod +x ./kubectl
#          sudo mv ./kubectl /usr/local/bin/kubectl
#          curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl

#      - name: Shell Permission
#        run: chmod +x k8s-deployment.sh
#      - name: Deploying to EKS through shell script
#        run: ./manifest/k8s-deployment.sh

      # Deploy to Amazon EKS
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/manifest/deployment.yml
          kubectl apply -f k8s/manifest/service.yml
          kubectl apply -f k8s/manifest/Hpa.yml
          kubectl get nodes
          kubectl get pods -o wide
          kubectl get all
#
#      - name: Install ArgoCD CLI
#        run: |
#            curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
#            chmod +x argocd
#            sudo mv argocd /usr/local/bin/argocd
#
#      - name: Login to ArgoCD
#        run: |
#          argocd login ${{ secrets.ARGO_CD_SERVER }} \
#              --username ${{ secrets.ARGO_CD_USERNAME }} \
#              --password ${{ secrets.ARGO_CD_PASSWORD }} \
#              --insecure
#
#      - name: Refresh ArgoCD App and Sync
#        run: argocd app sync my-app


---



