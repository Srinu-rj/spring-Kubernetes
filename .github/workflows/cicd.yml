name: spring-boot Github Actions

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - 'k8s/**'

#  schedule:
#    - cron: '* * * 8 5'

env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  JAVA_VERSION: 21 #${{ environment.JAVA_VERSION }}
  MAVEN_VERSION: 3.8.2
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  JF_USER: ${{ secrets.JF_USER }}
  JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
  JF_URL: ${{ secrets.JF_URL}}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION_FAMILY: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}
  ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}
  ARGO_CD_SERVER: ${{ secrets.ARGO_CD_SERVER }}
  ARGO_CD_USERNAME: ${{ secrets.ARGO_CD_USERNAME }}
  ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}
  GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
  GIT_EMAIL: ${{ secrets.GIT_EMAIL }}

jobs:
  Building-and-Testing:
    runs-on: ubuntu-latest
    #Todo Not strictly needed for Docker Hub, but good to include if you might switch.
    #Todo Required to push to GitHub Container Registry (ghcr.io)
    permissions:
      contents: read
      packages: write
    steps:
      - name: Run a script
        run: echo "This workflow runs at Everyone One Hour "

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Todo Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}   # Todo Make It '21'
          distribution: 'temurin' # 'adopt'
          architecture: x64
          cache: 'maven' # Strongly recommended for faster builds!
          cache-dependency-path: 'pom.xml' # Or '**/pom.xml' for multi-module projects

      - name: Setup Maven
        uses: stCarolas/setup-maven@v4.4
        with:
          maven-version: ${{ env.MAVEN_VERSION }} #3.8.2
      - name: Build with Maven
        run: mvn clean install

      - name: Run Unit Tests
        run: mvn test

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.27.0' # default is latest stable
        id: install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: spring-application
          IMAGE_TAG: v1.0
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

#      - name: Send Email Notification
#        uses: dawidd6/action-send-mail@v6
#        with:
#          server_address: smtp.gmail.com
#          server_port: 465
#          username: ${{ secrets.EMAIL_USER }}
#          password: ${{ secrets.EMAIL_PASS }}
#          subject: "Docker Image Scan Report"
#          to: ${{ secrets.EMAIL_TO }}
#          from: GitHub CI/CD <${{ secrets.EMAIL_USER }}>
#          body: "The Trivy scan report is attached. Job Done"
#          attachments: trivy-report.json



#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3 # Using the official Docker login action
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }} # Accessing the username from GitHub Secrets
#          password: ${{ secrets.DOCKER_PASSWORD }} # Accessing the password/token from GitHub Secrets
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - name: Build docker image
#        run: docker build -t spring-application-k8s .
#      - name: Tag docker image
#        run: docker tag spring-application-k8s srinu641/spring-application-k8s:v3.02
#      - name: Push docker image
#        run: docker push srinu641/spring-application-k8s:v3.02
#      - name: Getting Docker Images
#        run: |
#          docker images
#          docker ps -a

#      - name: Install Jfrog
#        run: |
#          sudo mkdir -p /usr/share/keyrings;
#          curl -fsSL https://releases.jfrog.io/artifactory/api/v2/repositories/jfrog-debs/keyPairs/primary/public | sudo gpg --dearmor -o /usr/share/keyrings/jfrog.gpg
#          echo "deb [signed-by=/usr/share/keyrings/jfrog.gpg] https://releases.jfrog.io/artifactory/jfrog-debs focal contrib" | sudo tee /etc/apt/sources.list.d/jfrog.list
#          sudo apt update;
#          sudo apt install -y jfrog-cli-v2-jf;
#          jf intro;









      # TODO Trivy Install
      - name: Install Trivy
        run: |
          sudo apt-get install -y wget gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
      # TODO  Scan the Image using Trivy
      - name: Trivy image scan
        run: trivy image srinu641/spring-application-k8s:v3.02 #todo Image Version

          #      - name: Scan Docker Image with Trivy
          #        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }}
          # TODO SONARQUBE
          #      - uses: sonarsource/sonarqube-scan-action@master #Todo Optional [ SonarSource/sonarqube-scan-action@v5.0.0 ]
          #        env:
          #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          #          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Todo Install Sonarqube in Ec2 Instance Add EC2 DNS Domain in GitHub Secrets
          #        with:
          #          # Todo Sonarqube Project Name
          #          args: >
          #            -Dsonar.organization=Spring-Boot-Sonarqube
          #            -Dsonar.projectKey=SonarCloudCodeAnalyisis
          #            -Dsonar.python.coverage.reportPaths=coverage.xml
          #      # Todo Sonarqube quality gate
          #      - name: SonarQube Quality Gate check
          #        id: sonarqube-quality-gate-check
          #        uses: sonarsource/sonarqube-quality-gate-action@master
          #        with:
          #          pollingTimeoutSec: 600
          #        env:
          #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          #          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}





