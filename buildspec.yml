version: 0.2

env:
  variables:
    SONAR_HOST_URL: "http://sonarqube.sonarqube.svc.cluster.local:9000"
    SONAR_PROJECT_KEY: "springboot-app"
#    secrets-manager:
    SONAR_TOKEN: "sonar/ci-token:token"

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR....
      - aws --version
      #- $(aws ecr get-login --region ap-south-1 --no-include-email)
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 765732641087.dkr.ecr.ap-south-1.amazonaws.com
      - # Replace with this to your repository URI
      - REPOSITORY_URI=765732641087.dkr.ecr.ap-south-1.amazonaws.com/spring-application
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - echo Build started on `date`
      - echo building the Jar file
      - mvn clean install
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
    # Todo Install SonarQube Server
    sonarqube-install:
      commands:
        - curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
        - unzip sonar-scanner.zip -d $HOME
        - export PATH=$HOME/sonar-scanner-5.0.1.3006-linux/bin:$PATH
    # Todo Add SonarQube analysis
    build:
      commands:
        - sonar-scanner \
          -Dsonar.projectKey=springboot-app \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://your-sonarqube-server \
          -Dsonar.login=$SONAR_TOKEN
  post_build:
    commands:
      - echo Build completed on `date`
      - echo pushing to repo
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      # Give your container name
      - DOCKER_CONTAINER_NAME=spring-application
      - printf '[{"name":"%s","imageUri":"%s"}]' $DOCKER_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo $DOCKER_CONTAINER_NAME
      - echo printing imagedefinitions.json
      - cat imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - target/spring-application-k8s.jar

